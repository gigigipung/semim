/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-03-22 03:48:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class checkall3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>전체선택반대선택</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("	/* 	\r\n");
      out.write("	.checkboxs{\r\n");
      out.write("		display:flex;\r\n");
      out.write("		gap:10px;\r\n");
      out.write("	} \r\n");
      out.write("	*/\r\n");
      out.write(" 	.checkboxs {\r\n");
      out.write("	overflow: hidden;\r\n");
      out.write("	} \r\n");
      out.write("	.checkedItems{\r\n");
      out.write("	clear: both;\r\n");
      out.write("	border: 1px solid black\r\n");
      out.write("	}\r\n");
      out.write("	.checkboxs > div {\r\n");
      out.write("	float:left;\r\n");
      out.write("	margin-right:20px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("const itemCount = 10;\r\n");
      out.write("$(loadedHandler);\r\n");
      out.write("function loadedHandler(){\r\n");
      out.write("	/* 1. 화면구성 */\r\n");
      out.write("	var htmlValue='';	\r\n");
      out.write("	for(var i=1; i<=itemCount; i++){\r\n");
      out.write("		htmlValue+=`\r\n");
      out.write("		<div>\r\n");
      out.write("			<label for=\"item-${i}\">메뉴item-${i}</label><input type=\"checkbox\" id=\"item-${i}\" data-itemcode=\"${i}\" class=\"item\">\r\n");
      out.write("		</div>\r\n");
      out.write("		`;\r\n");
      out.write("	}\r\n");
      out.write("	$(\".checkboxs\").html(htmlValue);\r\n");
      out.write("	\r\n");
      out.write("	/* 2. 전체선택 이벤트 등록 */\r\n");
      out.write("	$(\"#allCheck\").on(\"click\", allCheckHandler);\r\n");
      out.write("	\r\n");
      out.write("	/* 4. item(item)들 이벤트 등록 */\r\n");
      out.write("	$(\".item\").on(\"click\", itemCheckHandler);\r\n");
      out.write("	\r\n");
      out.write("	/* 6. 반대선택 이벤트 등록 */\r\n");
      out.write("    $(\"#revCheck\").on(\"click\", revCheckHandler);\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 7. 반대선택 이벤트 처리 CB Handler */\r\n");
      out.write("function revCheckHandler(){\r\n");
      out.write("	//console.log(this);\r\n");
      out.write("	console.log($(this));\r\n");
      out.write("	//$(\".item\").prop(\"checked\");\r\n");
      out.write("	/*\r\n");
      out.write("	$(\".item\").each(function( index, element){\r\n");
      out.write("		console.log(this);  // xxx(each) 메소드 앞 객체 - 그 중 하나씩\r\n");
      out.write("		console.log(element);  // xxx(each) 메소드 앞 객체 - 그 중 하나\r\n");
      out.write("		console.log($(element).prop(\"checked\"));\r\n");
      out.write("		$(element).prop(\"checked\", !$(element).prop(\"checked\"));\r\n");
      out.write("	});\r\n");
      out.write("	*/\r\n");
      out.write("	$(\".item\").prop(\"checked\", function( index, checkedValue){\r\n");
      out.write("		// each 외 xxx(prop) 메소드의 cb function들은 each 기능 내포되어 있음.\r\n");
      out.write("		// 2번째 매개인자는 each는 element하나, 그외메소드들은 checked 된 값이 전달되어 옴.\r\n");
      out.write("		console.log(this);  // each 외 xxx(prop) 메소드 앞 객체 - 그 중 하나씩\r\n");
      out.write("		console.log(checkedValue);  // each 외 xxx(prop) 메소드 앞 객체 - 그 중 하나의 checked 의 getter 값\r\n");
      out.write("		$(this).prop(\"checked\", !checkedValue);\r\n");
      out.write("	});\r\n");
      out.write("	/* 100.  item 이벤트, 반대선택 이벤트 처리시 공통 부분 함수를 호출 */\r\n");
      out.write("	updateCheckAllByCheckedItem();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/* 5. item 이벤트 처리 CB Handler */\r\n");
      out.write("function itemCheckHandler(){\r\n");
      out.write("	//console.log(this);\r\n");
      out.write("	console.log($(this));// 이벤트발생 바로 그 item\r\n");
      out.write("	\r\n");
      out.write("	/* 100.  item 이벤트, 반대선택 이벤트 처리시 공통 부분 함수를 호출 - 전체선택체크 */\r\n");
      out.write("	updateCheckAllByCheckedItem();\r\n");
      out.write("	console.log($(this).data(\"itemcode\"));\r\n");
      out.write("	\r\n");
      out.write("	var label = $(this).parent().children(\"label\").html();\r\n");
      out.write("	/* 8. checkedItems 에 이벤트발생 바로그 item의 div로 생성 */\r\n");
      out.write("	if($(this).prop(\"checked\") == true){\r\n");
      out.write("		var htmlVal = '';\r\n");
      out.write("		htmlVal +='<div data-itemcode=\"'+$(this).data(\"itemcode\")+'\">';\r\n");
      out.write("		htmlVal +='	<span>'+label+'</span>';\r\n");
      out.write("		htmlVal +='</div>';\r\n");
      out.write("		$(\".checkedItems\").append(htmlVal);\r\n");
      out.write("	}	\r\n");
      out.write("	/* 9. checkedItems 에 이벤트발생 바로 그 item의 div를 제거 */\r\n");
      out.write("	else {\r\n");
      out.write("		console.log(this);\r\n");
      out.write("		var checkedElement = this;\r\n");
      out.write("		var $checkedElement = $(this);\r\n");
      out.write("		\r\n");
      out.write("		checkedElment.innerHTML = '';\r\n");
      out.write("		$checkedElment.html('');\r\n");
      out.write("		\r\n");
      out.write("		$(\".checkedItems\").children().each(function(index, element){\r\n");
      out.write("			console.log(this);\r\n");
      out.write("			console.log($(this));\r\n");
      out.write("			console.log($(this).data(\"itemcode\"));\r\n");
      out.write("			console.log($checkedElement.data(\"itemcode\"));\r\n");
      out.write("			if($(this).data(\"itemcode\") == $checkedElement.data(\"itemcode\")){\r\n");
      out.write("				$(this).remove();\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("/* 100.  item 이벤트, 반대선택 이벤트 처리시 공통 부분 함수로 만들기 - 전체선택체크 */\r\n");
      out.write("function updateCheckAllByCheckedItem(){\r\n");
      out.write("	//console.log($(\".item\"));\r\n");
      out.write("	//console.log($(\".item:checked\"));\r\n");
      out.write("	//console.log($(\".item:checked\").length);\r\n");
      out.write("	\r\n");
      out.write("	// 체크된 item 개수가 max개 이면 전체선택 버튼 체크되게 함.\r\n");
      out.write("	if($(\".item:checked\").length == itemCount) {\r\n");
      out.write("		$(\"#allCheck\").prop(\"checked\",true);\r\n");
      out.write("	} else {\r\n");
      out.write("		$(\"#allCheck\").prop(\"checked\",false);\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write(" \r\n");
      out.write("/* 3. 전체선택 이벤트 처리 CB Handler */\r\n");
      out.write("function allCheckHandler(){\r\n");
      out.write("	//console.log(this);\r\n");
      out.write("	console.log($(this));\r\n");
      out.write("	\r\n");
      out.write("	// attr() 메소드는 동적페이지 변화인지되지 않음.\r\n");
      out.write("	console.log($(this).attr(\"checked\"));  // undefined\r\n");
      out.write("	// prop() 메소드는 동적페이지 변화를 인지하고 그 결과값을 true/false로 줌.\r\n");
      out.write("	console.log($(this).prop(\"checked\"));  // true / false\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	console.log($(\".item\"));  // 10개 elements\r\n");
      out.write("	\r\n");
      out.write("	var allchecked = $(this).prop(\"checked\");\r\n");
      out.write("	\r\n");
      out.write("	$(\".item\").prop(\"checked\", allchecked);\r\n");
      out.write("\r\n");
      out.write("	/* 10. 전체선택 처리 후 checkItems에도 전체 적용 */\r\n");
      out.write("	if(allchecked){\r\n");
      out.write("		$(\".item\").each(function(){\r\n");
      out.write("			var label= $(this).parent().children(\"label\").html();\r\n");
      out.write("			var htmlVal = '';\r\n");
      out.write("			htmlVal +='<div data-itemcode=\"'+$(this).data(\"itemcode\")+'\">';\r\n");
      out.write("			htmlVal +='	<span>'+label+'</span>';\r\n");
      out.write("			htmlVal +='</div>';\r\n");
      out.write("			$(\".checkedItems\").append(htmlVal);\r\n");
      out.write("		});\r\n");
      out.write("	}	\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>jQuery 전체선택/반대선택</h1>\r\n");
      out.write("	<div class=\"warp-check\">\r\n");
      out.write("		<label for=\"allCheck\">전체선택</label><input type=\"checkbox\"\r\n");
      out.write("			id=\"allCheck\">\r\n");
      out.write("		|\r\n");
      out.write("		<label for=\"revCheck\">반대선택</label><input type=\"checkbox\"\r\n");
      out.write("			id=\"revCheck\">\r\n");
      out.write("	</div>\r\n");
      out.write("	<div class=\"checkboxs\">\r\n");
      out.write("	<!-- \r\n");
      out.write("		<div>\r\n");
      out.write("			<label for=\"item-n\">메뉴item-n</label><input type=\"checkbox\" id=\"item-n\" data-itemcode=\"n\" class=\"item\">\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<label for=\"item-1\">메뉴item-1</label><input type=\"checkbox\" id=\"item-1\" class=\"item\">\r\n");
      out.write("		</div>\r\n");
      out.write("		 -->\r\n");
      out.write("	</div>\r\n");
      out.write("	<div class=\"checkedItems\">\r\n");
      out.write("	<!-- \r\n");
      out.write("		<div data-itemcode=\"n\">\r\n");
      out.write("			<span>메뉴item-n</span>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div data-itemcode=\"n\">\r\n");
      out.write("			<span>메뉴item-n</span>\r\n");
      out.write("		</div>\r\n");
      out.write("		 -->\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
